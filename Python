print("Hello, World!")
exit()


if 5 > 2:
  print("Five is greater than two!")

#OR
  
if 5 > 2:
    print("Five is greater than two!")


x = 5
y = "Hello, World!"


"""
This is a comment
written in
more than just one line
"""
print ("Hello, World!")



# VARIABLES
x = 5
y = "John"
print(x)
print(y)


# casting
x = str(3)    # x will be '3'
y = int(3)    # y will be 3
z = float(3)  # z will be 3.0


x = 5
y = "John"
print(type(x)) # shows <class 'int'>
print(type(y)) # shows <class 'str'>


# Single and Double Quotes are the same in Python
x = "John"
x = 'John'


# Variables are case-sensitive. a is different than A
a = 4
A = "Sally"

# Variable names need to start with a letter or _
# Can't start with a number
# case-sensitive
myvar = "John"
my_var = "John"
_my_var = "John"
myVar = "John"
MYVAR = "John"
myvar2 = "John"

#Multi Words Variable Names

#Camel Case
myVariableName = "John"

#Pascal Case
MyVariableName = "John"

#Snake Case
my_variable_name = "John"

#Multiple Variables
x, y, z = "Orange", "Banana", "Ginger"
print (x)
print(y)
print(z)

#Can assign same value to multiple variables
x = y = z = "Oragne"
print(x)
print(y)
print(z)

#Extracting variables
fruits = ["apple", "banana", "cherry"]
x, y, z = fruits
print(x)
print(y)
print(z)

#Output Variables
x = "Python is awesome"
print(x)

x = "Python"
y = "is"
z = "awesome"
print(x, y, z)

x = "Python "
y = "is "
z = "awesome"
print(x + y + z)

# +
x = 5
y = 10
print(x + y)

# can't do number + string
# best is to print multiple variables separately
x = 5
y = "John"
print(x, y)

# Global Variables
x = "awesome"
def myfunc():
  print("Python is " + x)
myfunc()

#variable inside a function
x = "awesome"
def myfunc():
  x = "fantastic"
  print("Python is " + x)
myfunc()
print("Python is " + x)

# Global Keyword
def myfunc():
  global x
  x = "fantastic"
myfunc()
print("Python is " + x)

x = "awesome"
def myfunc():
  global x
  x = "fantastic"
myfunc()
print("Python is " + x)

#Python Variable Exercise
carname = "Volvo"

# Create a variable named x and assign the value 50 to it.
x = 50

# Display the sum of 5 + 10, using two variables: x and y.
x = 5
y = 10
print(x + y)

# Create a variable called z, assign x + y to it, and display the result.
x = 5
y = 10
z = x + y
print(z)

# Remove the illegal characters in the variable name:
# 2my-first_name = "John"
myfirst_name = "John"

# Insert the correct syntax to assign the same value to all three variables in one code line.
x = y = z = "Orange"

# Insert the correct keyword to make the variable x belong to the global scope.
def myfunc():
  global x
  x = "fantastic"

# The following code example would print the data type of x, what data type would that be?
x = 5
print(type(x))

int

# Random Number
# Python does not have a random() function to make a random number, but Python has a built-in module called random that can be used to make random numbers:
# Example
# Import the random module, and display a random number between 1 and 9:
# import random


print(random.randrange(1, 10))

# Strings
# single quotations are the same as double quotations
# triple is for multiline, triple single quotes are same as triple double quotes

""" Strings are arrays. Strings in Python are arrays of bytes representing unicode char
However, Python does not have a character data type, a single character is simply a string with a length of 1.

Square brackets can be used to access elements of the string.
"""
a = "Hello, World!"
print(a[1])

""" Loops Thru a String
"""

for x in "banana":
  print(x)
  
  
# String Length
# To get the length of a string, use the len() function.
# The len() function returns the length of a string:

a = "Hello, World!"
print(len(a))

#Check String
#To check if a certain phrase or character is present in a string, we can use the keyword in.
# Check if "free" is present in the following text:

txt = "The best things in life are free!"
print("free" in txt)

# Use it in an if statement:
# Print only if "free" is present:

txt = "The best things in life are free!"
if "free" in txt:
  print("Yes, 'free' is present.")
  
# Check if NOT
# To check if a certain phrase or character is NOT present in a string, we can use the keyword not in.
# Check if "expensive" is NOT present in the following text:

txt = "The best things in life are free!"
print("expensive" not in txt)

# Use it in an if statement:
# print only if "expensive" is NOT present:
txt = "The best things in life are free!"
if "expensive" not in txt:
  print("No, 'expensive' is NOT present.")
  
# Get the characters from position 2 to position 5 (not included):
b = "Hello, World!"
print(b[2:5])

# Slice From the Start
# By leaving out the start index, the range will start at the first character:
# Get the characters from the start to position 5 (not included):

b = "Hello, World!"
print(b[:5])

# Slice To the End
# By leaving out the end index, the range will go to the end:
# Get the characters from position 2, and all the way to the end:
b = "Hello, World!"
print(b[2:])

# Negative Indexing
# Use negative indexes to start the slice from the end of the string:
# Get the characters:
# From: "o" in "World!" (position -5)
$ To, but not included: "d" in "World!" (position -2):
b = "Hello, World!"
print(b[-5:-2])


# Strings
# Upper Case
# The upper() method returns the string in upper case:
a = "Hello, World!"
print(a.upper())

# Upper Case
# The lower() method returns the string in lower case:
a = "Hello, World!"
print(a.lower())

# Remove Whitespace
# Whitespace is the space before and/or after the actual text, and very often you want to remove this space.
# The strip() method removes any whitespace from the beginning or the end:
# not the middle
a = " Hello, World! "
print(a.strip()) # returns "Hello, World!"

# Replace String
# The replace() method replaces a string with another string:
# case-sensitive
a = "Hello, World!"
print(a.replace("H", "J"))

# Split String
# The split() method returns a list where the text between the specified separator becomes the list items.
# The split() method splits the string into substrings if it finds instances of the separator:
a = "Hello, World!"
print(a.split(",")) # returns ['Hello', ' World!']

# turns the identifier and cuts it there
a = "Hello, World!"
b = a.split("r")
print(b) # returns ['Hello, Wo', 'ld!']


# String Concatenation
# To concatenate, or combine, two strings you can use the + operator.
# Merge variable a with variable b into variable c:
a = "Hello"
b = "World"
c = a + b
print(c)

# To add a space between them, add a " ":
a = "Hello"
b = "World"
c = a + " " + b
print(c)

# can't combine strings with numbers
# the following does not work
age = 36
txt = "My name is John, I am " + age
print(txt)

# can combine using format()
# format() takes passed arguments, formats them, and places them in the string where {} are
# Use the format() method to insert numbers into strings:
age = 36
txt = "My name is John, and I am {}"
print(txt.format(age))

# The format() method takes unlimited number of arguments, and are placed into the respective placeholders:
quantity = 3
itemno = 567
price = 49.95
myorder = "I want {} pieces of item {} for {} dollars."
print(myorder.format(quantity, itemno, price))

# You can use index numbers {0} to be sure the arguments are placed in the correct placeholders:
quantity = 3
itemno = 567
price = 49.95
myorder = "I want to pay {2} dollars for {0} pieces of item {1}."
print(myorder.format(quantity, itemno, price))


# Escape
# Escape Character
# To insert characters that are illegal in a string, use an escape character.
# An escape character is a backslash \ followed by the character you want to insert.
# An example of an illegal character is a " inside a string that is surrounded by "
# You will get an error if you use double quotes inside a string that is surrounded by double quotes:
txt = "We are the so-called "Vikings" from the north."

# To fix this problem, use the escape character \":
# The escape character allows you to use double quotes when you normally would not be allowed:
txt = "We are the so-called \"Vikings\" from the north."

# Other Excape Characters used in Python:
# \'	Single Quote	
# \\	Backslash	
# \n	New Line	
# \r	Carriage Return	
# \t	Tab	
# \b	Backspace	
# \f	Form Feed	
# \ooo	Octal value	
# \xhh	Hex value


# String Methods
# All string methods returns new values. They do not change the original string.
# Method	Description
# capitalize()	Converts the first character to upper case
# casefold()	Converts string into lower case
# center()	Returns a centered string
# count()	Returns the number of times a specified value occurs in a string
# encode()	Returns an encoded version of the string
# endswith()	Returns true if the string ends with the specified value
# expandtabs()	Sets the tab size of the string
# find()	Searches the string for a specified value and returns the position of where it was found
# format()	Formats specified values in a string
# format_map()	Formats specified values in a string
# index()	Searches the string for a specified value and returns the position of where it was found
# isalnum()	Returns True if all characters in the string are alphanumeric
# isalpha()	Returns True if all characters in the string are in the alphabet
# isdecimal()	Returns True if all characters in the string are decimals
# isdigit()	Returns True if all characters in the string are digits
# isidentifier()	Returns True if the string is an identifier
# islower()	Returns True if all characters in the string are lower case
# isnumeric()	Returns True if all characters in the string are numeric
# isprintable()	Returns True if all characters in the string are printable
# isspace()	Returns True if all characters in the string are whitespaces
# istitle()	Returns True if the string follows the rules of a title
# isupper()	Returns True if all characters in the string are upper case
# join()	Joins the elements of an iterable to the end of the string
# ljust()	Returns a left justified version of the string
# lower()	Converts a string into lower case
# lstrip()	Returns a left trim version of the string
# maketrans()	Returns a translation table to be used in translations
# partition()	Returns a tuple where the string is parted into three parts
# replace()	Returns a string where a specified value is replaced with a specified value
# rfind()	Searches the string for a specified value and returns the last position of where it was found
# rindex()	Searches the string for a specified value and returns the last position of where it was found
# rjust()	Returns a right justified version of the string
# rpartition()	Returns a tuple where the string is parted into three parts
# rsplit()	Splits the string at the specified separator, and returns a list
# rstrip()	Returns a right trim version of the string
# split()	Splits the string at the specified separator, and returns a list
# splitlines()	Splits the string at line breaks and returns a list
# startswith()	Returns true if the string starts with the specified value
# strip()	Returns a trimmed version of the string
# swapcase()	Swaps cases, lower case becomes upper case and vice versa
# title()	Converts the first character of each word to upper case
# translate()	Returns a translated string
# upper()	Converts a string into upper case
# zfill()	Fills the string with a specified number of 0 values at the beginning


# Boolean
# True or False
print (10 > 9) # returns True
print(10 == 9) # returns False
print(10 < 9) # returns False

# Print a message based on whether the condition is True or False:
a = 200
b = 33
if b > a:
  print("b is greater than a")
else:
  print("b is not greater than a")

# Evaluate Values and Variables
# bool() allows you to evaluate any value, and give you True or False in return,
# Evaluate a string and a number:
print(bool("Hello"))
print(bool(15))

# Evaluate two variables:
x = "Hello"
y = 15
print(bool(x))
print(bool(y))

# Most Values are True
# Almost any value is evaluated to True if it has some sort of content.
# Any string is True, except empty strings.
# Any number is True, except 0.
# Any list, tuple, set, and dictionary are True, except empty ones.
# The following will return True:
bool("abc")
bool(123)
bool(["apple", "cherry", "banana"])

# Some Values are False
# There are not many values that evaluate to False, except empty values, such as (), [], {}, "", the number 0, and the value None. And of course the value False evaluates to False.
# The following will return False:
bool(False)
bool(None)
bool(0)
bool("")
bool(())
bool([])
bool({})

# One more value, or object in this case, evaluates to False,
# and that is if you have an object that is made from a class
# with a __len__ function that returns 0 or False:
class myclass():
  def __len__(self):
    return 0
myobj = myclass()
print(bool(myobj))

# Functions can Return a Boolean
# You can create functions that returns a Boolean Value:
# Print the answer of a function:
def myFunction() :
  return True
print(myFunction())

# You can execute code based on the Boolean answer of a function:
# Print "YES!" if the function returns True, otherwise print "NO!":
def myFunction() :
  return True
if myFunction():
  print("YES!")
else:
  print("NO!")

# Python also has many built-in functions that return a boolean value,
# like the isinstance() function, which can be used to determine if an object
# is of a certain data type:
# Check if an object is an integer or not:
x = 200
print(isinstance(x, int)) # returns True


# Operators
# Python Operators
# Operators are used to perform operations on variables and values.
# In the example below, we use the + operator to add together two values:
print(10 + 5)

# Python divides the operators in the following groups:
# Arithmetic operators
# Assignment operators
# Comparison operators
# Logical operators
# Identity operators
# Membership operators
# Bitwise operators

# Arithmetic
# + - * /
# % modulus - gives remainder
# ** Exponentiation
# // Floor Division - rounds the result down to the nearest whole number

# Assignment Operators
# changes value of x:
# =	equal
# +=	if x += 3 then x is x + 3
# -=	if x -= 3 then x is x - 3
# *=	if x *= 3 then x is x * 3
# /=	if x /= 3	then x = x / 3	
# %=	if x %= 3	then x = x % 3	
# //= if x //= 3 then	x = x // 3	
# **=	if x **= 3 then	x = x ** 3
# Bitwise? - need to study this more
# &=	if x &= 3	then x = x & 3	- opposite of remainder, what u need to be whole
# |=	if x |= 3	then x = x | 3	
# ^=	if x ^= 3	then x = x ^ 3	
# >>=	if x >>= 3	then x = x >> 3	
# <<=	if x <<= 3	then x = x << 3

# Python Comparison Operators
# ==	Equal	x == y	
# !=	Not equal	x != y	
# >	Greater than	x > y	
# <	Less than	x < y	
# >=	Greater than or equal to	x >= y	
# <=	Less than or equal to	x <= y

# Python Logical Operators
# Logical operators are used to combine conditional statements:
# and 	Returns True if both statements are true	x < 5 and  x < 10	
# or	Returns True if one of the statements is true	x < 5 or x < 4	
# not	Reverse the result, returns False if the result is true	not(x < 5 and x < 10)

# Identity Operators
# Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:
# is 	Returns True if both variables are the same object	x is y	
# is not	Returns True if both variables are not the same object	x is not y

# Membership Operators
# Membership operators are used to test if a sequence is presented in an object:
# in 	Returns True if a sequence with the specified value is present in the object	x in y	
# not in	Returns True if a sequence with the specified value is not present in the object

# Bitwise Operators
# Bitwise operators are used to compare (binary) numbers:
# & 	AND	Sets each bit to 1 if both bits are 1
# |	OR	Sets each bit to 1 if one of two bits is 1
#  ^	XOR	Sets each bit to 1 if only one of two bits is 1
# ~ 	NOT	Inverts all the bits
# <<	Zero fill left shift	Shift left by pushing zeros in from the right and let the leftmost bits fall off
# >>	Signed right shift	Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off

# List
# Lists are used to store multiple items in a single variable.
# Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.
# Lists are created using square brackets
# Create a List:
thislist = ["apple", "banana", "cherry"]
print(thislist)

# List Items
# List items are ordered, changeable, and allow duplicate values.
# List items are indexed, the first item has index [0], 
# the second item has index [1] etc.

# Ordered
# When we say that lists are ordered, it means that the items 
# have a defined order, and that order will not change.
# If you add new items to a list, 
# the new items will be placed at the end of the list.

# There are some list methods that will change the order, but in general: the order of the items will not change.
# Changeable
# The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.

# Allow Duplicates
# Since lists are indexed, lists can have items with the same value:
# Lists allow duplicate values:
thislist = ["apple", "banana", "cherry", "apple", "cherry"]
print(thislist)

# List Length
# To determine how many items a list has, use the len() function:
# Print the number of items in the list:
thislist = ["apple", "banana", "cherry"]
print(len(thislist))

# List Items - Data Types
# List items can be of any data type:
# String, int and boolean data types:
list1 = ["apple", "banana", "cherry"]
list2 = [1, 5, 7, 9, 3]
list3 = [True, False, False]

# A list can contain different data types:
# A list with strings, integers and boolean values:
list1 = ["abc", 34, True, 40, "male"]

# type()
# From Python's perspective, lists are defined as objects with the data type 'list':
<class 'list'>

# What is the data type of a list?
mylist = ["apple", "banana", "cherry"]
print(type(mylist))
# <class 'list'>

# The list() Constructor
# It is also possible to use the list() constructor when creating a new list.
# Using the list() constructor to make a List:
thislist = list(("apple", "banana", "cherry")) # note the double round-brackets
print(thislist)

# Python Collections (Arrays)
# the 4 collection data types in Python:

# List - ordered and changeable. Allows duplicate members.
# Tuple - ordered and UNchangeable. Allows duplicate members.
# Set - unordered, unchangeable*, and unindexed. No duplicate members.
# Dictionary - ordered** and changeable. No duplicate members.
# *Set items are unchangeable, but you can remove and/or add items whenever you like.

# **As of Python version 3.7, dictionaries are ordered.
# In Python 3.6 and earlier, dictionaries are unordered.

# When choosing a collection type, it is useful to understand 
# the properties of that type. Choosing the right type for a particular data set 
# could mean retention of meaning, and,
# it could mean an increase in efficiency or security.

# Access List Items
# Access Items
# List items are indexed and you can access them by referring to the index number:
# Print the second item of the list:
thislist = ["apple", "banana", "cherry"]
print(thislist[1])

# The first item has index 0.

# Negative Indexing
# means start from the end
# -1 refers to the last item, -2 refers to the second last item etc.

# Print the last item of the list:
thislist = ["apple", "banana", "cherry"]
print(thislist[-1]) # returns cherry

# Range of Indexes
# You can specify a range of indexes by specifying where to start and where to end the range.
# When specifying a range, the return value will be a new list with the specified items.
# Return the third, fourth, and fifth item:
thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[2:5]) # returns ['cherry', 'orange', 'kiwi']

# The search will start at index 2 (included) and end at index 5 (not included).
# Remember that the first item has index 0.

# By leaving out the start value, the range will start at the first item:
# This example returns the items from the beginning to, but NOT including, "kiwi":

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[:4])

# By leaving out the end value, the range will go on to the end of the list:
# This example returns the items from "cherry" to the end:
thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[2:])

# ---
# ---
# ---





