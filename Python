print("Hello, World!")
exit()


if 5 > 2:
  print("Five is greater than two!")

#OR
  
if 5 > 2:
    print("Five is greater than two!")


x = 5
y = "Hello, World!"


"""
This is a comment
written in
more than just one line
"""
print ("Hello, World!")



# VARIABLES
x = 5
y = "John"
print(x)
print(y)


# casting
x = str(3)    # x will be '3'
y = int(3)    # y will be 3
z = float(3)  # z will be 3.0


x = 5
y = "John"
print(type(x)) # shows <class 'int'>
print(type(y)) # shows <class 'str'>


# Single and Double Quotes are the same in Python
x = "John"
x = 'John'


# Variables are case-sensitive. a is different than A
a = 4
A = "Sally"

# Variable names need to start with a letter or _
# Can't start with a number
# case-sensitive
myvar = "John"
my_var = "John"
_my_var = "John"
myVar = "John"
MYVAR = "John"
myvar2 = "John"

#Multi Words Variable Names

#Camel Case
myVariableName = "John"

#Pascal Case
MyVariableName = "John"

#Snake Case
my_variable_name = "John"

#Multiple Variables
x, y, z = "Orange", "Banana", "Ginger"
print (x)
print(y)
print(z)

#Can assign same value to multiple variables
x = y = z = "Oragne"
print(x)
print(y)
print(z)

#Extracting variables
fruits = ["apple", "banana", "cherry"]
x, y, z = fruits
print(x)
print(y)
print(z)

#Output Variables
x = "Python is awesome"
print(x)

x = "Python"
y = "is"
z = "awesome"
print(x, y, z)

x = "Python "
y = "is "
z = "awesome"
print(x + y + z)

# +
x = 5
y = 10
print(x + y)

# can't do number + string
# best is to print multiple variables separately
x = 5
y = "John"
print(x, y)

# Global Variables
x = "awesome"
def myfunc():
  print("Python is " + x)
myfunc()

#variable inside a function
x = "awesome"
def myfunc():
  x = "fantastic"
  print("Python is " + x)
myfunc()
print("Python is " + x)

# Global Keyword
def myfunc():
  global x
  x = "fantastic"
myfunc()
print("Python is " + x)

x = "awesome"
def myfunc():
  global x
  x = "fantastic"
myfunc()
print("Python is " + x)

#Python Variable Exercise
carname = "Volvo"

# Create a variable named x and assign the value 50 to it.
x = 50

# Display the sum of 5 + 10, using two variables: x and y.
x = 5
y = 10
print(x + y)

# Create a variable called z, assign x + y to it, and display the result.
x = 5
y = 10
z = x + y
print(z)

# Remove the illegal characters in the variable name:
# 2my-first_name = "John"
myfirst_name = "John"

# Insert the correct syntax to assign the same value to all three variables in one code line.
x = y = z = "Orange"

# Insert the correct keyword to make the variable x belong to the global scope.
def myfunc():
  global x
  x = "fantastic"

# The following code example would print the data type of x, what data type would that be?
x = 5
print(type(x))

int

# Random Number
# Python does not have a random() function to make a random number, but Python has a built-in module called random that can be used to make random numbers:
# Example
# Import the random module, and display a random number between 1 and 9:
# import random


print(random.randrange(1, 10))

# Strings
# single quotations are the same as double quotations
# triple is for multiline, triple single quotes are same as triple double quotes

""" Strings are arrays. Strings in Python are arrays of bytes representing unicode char
However, Python does not have a character data type, a single character is simply a string with a length of 1.

Square brackets can be used to access elements of the string.
"""
a = "Hello, World!"
print(a[1])

""" Loops Thru a String
"""

for x in "banana":
  print(x)
  
  
# String Length
# To get the length of a string, use the len() function.
# The len() function returns the length of a string:

a = "Hello, World!"
print(len(a))

#Check String
#To check if a certain phrase or character is present in a string, we can use the keyword in.
# Check if "free" is present in the following text:

txt = "The best things in life are free!"
print("free" in txt)

# Use it in an if statement:
# Print only if "free" is present:

txt = "The best things in life are free!"
if "free" in txt:
  print("Yes, 'free' is present.")
  
# Check if NOT
# To check if a certain phrase or character is NOT present in a string, we can use the keyword not in.
# Check if "expensive" is NOT present in the following text:

txt = "The best things in life are free!"
print("expensive" not in txt)

# Use it in an if statement:
# print only if "expensive" is NOT present:
txt = "The best things in life are free!"
if "expensive" not in txt:
  print("No, 'expensive' is NOT present.")
  
# Get the characters from position 2 to position 5 (not included):
b = "Hello, World!"
print(b[2:5])

# Slice From the Start
# By leaving out the start index, the range will start at the first character:
# Get the characters from the start to position 5 (not included):

b = "Hello, World!"
print(b[:5])

# Slice To the End
# By leaving out the end index, the range will go to the end:
# Get the characters from position 2, and all the way to the end:
b = "Hello, World!"
print(b[2:])

# Negative Indexing
# Use negative indexes to start the slice from the end of the string:
# Get the characters:
# From: "o" in "World!" (position -5)
$ To, but not included: "d" in "World!" (position -2):
b = "Hello, World!"
print(b[-5:-2])
